PEP: 9999
Title: Type Stubs
Author: Jelle Zijlstra <jelle.zijlstra@gmail.com>,
 Rebecca Chen <rechen@google.com>,
 Teddy Sudol <tsudol@google.com>,
 Sebastian Rittau <srittau@rittau.biz>
Status: Draft
Type: Informational
Content-Type: text/x-rst
Created:
Post-History:

Abstract
========

Optional type hints were introduced to the Python language in PEP 484
[#pep484]_, based on the function annotation syntax from PEP 3107
[#pep3107]_. PEP 484 also introduced *type stubs*, files that provide type
information for untyped Python packages and modules. Type stubs serve
multiple purposes:

* They are the only way to add type information to extension modules.
* They can provide type information for packages that do not wish to
  add them inline.
* They can be distributed separately from the implementation.
  This allows stubs to be develped at a different pace or by different
  authors, which is especially useful when adding type annotations to
  existing packages.
* They act as documentation, succinctly explaining the external
  API of a package, without including the implementation or private
  members.

This PEP aims to give guidance to both authors of stub files and developers
of type checkers. It lists constructs that compliant type checkers are
expected to support and gives guidance on the contents and style of stub
files.

A type stub is considered to be compliant if it only uses constructs decribed
in this PEP. Type stub authors can elect to use additional constructs, but
must be prepared that some type checkers will not parse them as expected.

A type checker is considered to be compliant if
it accepts all compliant documents. This means that it
will parse such a document without error and does not interpret any
construct in a contradictory manner, but type checker are not
required to type check all possible constructs. Additionally, a type checker
can support extra constructs not described in this PEP. It is recommended
that type checker document all deviations.

References
==========

.. [#pep484] PEP 484 -- Type Hints, van Rossum et al. (https://www.python.org/dev/peps/pep-0484)
.. [#pep526] PEP 526 -- Syntax for Variable Annotations, Gonzalez et al. (https://www.python.org/dev/peps/pep-0526)
.. [#pep3107] PEP 3107 -- Function Annotations, Winter and Lownds (https://www.python.org/dev/peps/pep-3107)

Copyright
=========

This document has been placed in the public domain.
