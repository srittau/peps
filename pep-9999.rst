PEP: 9999
Title: Type Stubs
Author: Jelle Zijlstra <jelle.zijlstra@gmail.com>,
 Rebecca Chen <rechen@google.com>,
 Teddy Sudol <tsudol@google.com>,
 Sebastian Rittau <srittau@rittau.biz>
Status: Draft
Type: Informational
Content-Type: text/x-rst
Created:
Post-History:

Abstract
========

Optional type hints were introduced to the Python language in PEP 484
[#pep484]_, based on the function annotation syntax from PEP 3107
[#pep3107]_. PEP 484 also introduced *type stubs*, also called *stub files*,
that provide type information for untyped Python packages and modules. Type
stubs serve multiple purposes:

* They are the only way to add type information to extension modules.
* They can provide type information for packages that do not wish to
  add them inline.
* They can be distributed separately from the implementation.
  This allows stubs to be develped at a different pace or by different
  authors, which is especially useful when adding type annotations to
  existing packages.
* They act as documentation, succinctly explaining the external
  API of a package, without including the implementation or private
  members.

This PEP aims to give guidance to both authors of type stubs and developers
of type checkers. It describes the contents of compliant type stubs,
suggests a style guide for them, and lists constructs that compliant type
checkers are expected to support.

A type stub is considered to be compliant if it only uses constructs decribed
in this PEP. Type stub authors can elect to use additional constructs, but
must be prepared that some type checkers will not parse them as expected.

A type checker is considered to be compliant if
it accepts all compliant type stubs. This means it
will parse a compliant type stub without error and does not interpret any
construct in a contradictory manner. A compliant type checker is not
required to interpret all standard constructs, and additionally a type checker
can support extra constructs not described in this PEP. All deviations from
this PEP should be documented.

Directory Structure and Syntax
==============================

Type stubs are syntactically valid Python files with a ``.pyi`` suffix.
Type checkers are expected to support the syntax of the latest Python
version. Type stubs should be parseable with the latest released Python
version, but also support the previous version up until six months after
the release of the current version. Older Python versions do not need to be
supported, even if the implementation supports older versions or the
type checker is run with an older version.

For example, it is recommended to use PEP 526 [#pep526]_ variable
annotations, introduced in Python 3.6, in all stubs, even for Python 2-only
modules.

Type stub files can either live next to their respective implementation
files or in a separate directory::

    pkg
        __init__.py
        __init__.pyi
        mod.py
        mod.pyi

    pkg
        __init__.py
        mod.py
    stubs
        pkg
            __init__.pyi
            mod.pyi

Distribution
============

Type stubs can be distributed separately from the implementation, 
see PEP 561 [#pep561]_ for more information. The typeshed_ project
includes stubs for Python's standard library and several third-party
packages. These are usually distributed with type checkers and do not
require separate installation.

References
==========

.. [#pep484] PEP 484 -- Type Hints, van Rossum et al. (https://www.python.org/dev/peps/pep-0484)
.. [#pep526] PEP 526 -- Syntax for Variable Annotations, Gonzalez et al. (https://www.python.org/dev/peps/pep-0526)
.. [#pep561] PEP 561 -- Distributing and Packaging Type Information, Smit (https://www.python.org/dev/peps/pep-0561)
.. [#pep3107] PEP 3107 -- Function Annotations, Winter and Lownds (https://www.python.org/dev/peps/pep-3107)

.. _typeshed: https://github.com/python/typeshed

Copyright
=========

This document has been placed in the public domain.
